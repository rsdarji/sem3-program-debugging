import features


def test_encrypt():
    input_output = [
        ("hello", "3", "khoor"),
        ("hello world", "3", "khoor zruog"),
        ("Hello", "3", "Khoor"),
        ("Hello!", "3", "Khoor!"),
        ("hello", "12", "tqxxa"),
        ("hello", "-2", "fcjjm"),
        ("z", "1", "a")
    ]

    for text, key, expected_output in input_output:
        output = features.encrypt(text, key)
        assert output == expected_output, "({}, {}) -> {} (expected: {})".format(text, key, output, expected_output)

    print("text_encrypt: OK")


def test_decrypt():
    input_output = [
        ("khoor", "3", "hello"),
        ("khoor zruog", "3", "hello world"),
        ("Khoor", "3", "Hello"),
        ("Khoor!", "3", "Hello!"),
        ("tqxxa", "12", "hello"),
        ("fcjjm", "-2", "hello"),
        ("a", "1", "z")
    ]

    for secret, key, expected_output in input_output:
        output = features.decrypt(secret, key)
        assert output == expected_output, "({}, {}) -> {} (expected: {})".format(secret, key, output, expected_output)

    print("test decrypt: OK")


def test_random_key():
    outputs = []
    for _ in range(10000):
        outputs.append(features.random_key())

    for n in range(1, 26):
        assert n in outputs, "Key {} never generated by random_key".format(n)

    for key in outputs:
        assert key in range(1, 26), 'Key {} is out of range'.format(key)

    print("test random_key: OK")


def test_random_encrypt():
    ...


if __name__ == "__main__":
    test_encrypt()
    test_decrypt()
    test_random_key()
    test_random_encrypt()